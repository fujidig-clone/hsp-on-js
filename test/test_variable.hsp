	a = 1
	is(a, 1)
	a = 2
	is(a, 2)
	a.1 = 3
	is(a.1, 3)
	a.2.3 = 4
	is(a.2.3, 4)
	a.1.2.3.4 = 5
	is(a.1.2.3.4, 5)
----------------------------------------
; 変数は要素数 1 の int 型で初期化される
	is(a, 0)
	is(length(a), 1)
	is(length2(a), 0)
	is(length3(a), 0)
	is(length4(a), 0)
----------------------------------------
; 違う型の値を代入すると初期化される
	dim a, 3
	is(length(a), 3)
	a = 1
	is(length(a), 3)
	a = 2.0
	is(length(a), 1)
----------------------------------------
; 添え字指定をして違う型の値を代入するエラーになる
	dim a, 3
	assert_error 31
	a.1 = 1.0
----------------------------------------
; インデックスが 0 の場合は違う型の値を代入してもエラーにならない
	dim a, 3
	is(length(a), 3)
	a.0 = 2.0
	is(length(a), 1)

	dim a, 2, 3
	is(length(a), 2)
	is(length2(a), 3)
	a.0.0 = 2.0
	is(length(a), 1)
	;is(length2(a), 1)
----------------------------------------
	a = 5
	is(a, 5)
	a += 100
	is(a, 105)
	a ++
	is(a, 106)
	a --
	is(a, 105)
----------------------------------------
	a = "foo"
	is(a, "foo")
	a += "bar"
	is(a, "foobar")
	a ++
	is(a, "foobar1")
	assert_error 21
	a --
----------------------------------------
; 複合代入で型が変わる場合はエラー
	a = 3.0
	assert_error 6
	a < 4.0
----------------------------------------
; 配列拡張
	a = 4
	a.1 = 3
	is(length(a), 2)
	a.2 += 2
	is(length(a), 3)
	a.3 ++
	is(length(a), 4)
	a.5 --
	is(length(a), 6)

	is(a.0, 4)
	is(a.1, 3)
	is(a.2, 2)
	is(a.3, 1)
	is(a.4, 0)
	is(a.5, -1)
----------------------------------------
; 添え字の値は int 型のみ受け付ける
	assert_error 6
	_ = a(0.0)
----------------------------------------
	dim a, 1, 1
	assert_error 6
	_ = a(0, 0.0)
----------------------------------------
	assert_error 6
	a(0.0) = 0
----------------------------------------
	dim a, 1, 1
	assert_error 6
	a(0, 0.0) = 0
----------------------------------------
; 範囲外の要素アクセス
	assert_error 7
	_ = a(-1)
----------------------------------------
	assert_error 7
	_ = a(1)
----------------------------------------
	assert_error 7
	_ = a(0, 0)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(3, 0)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(-1, 1)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(0, -1)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(3, -1)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(0, 3)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(-1, 3)
----------------------------------------
	dim a, 3, 3
	assert_error 7
	_ = a(0, 0, 0)
----------------------------------------
	assert_error 7
	a(-1) = 1
----------------------------------------
	dim a
	a(5) = 1
	dim a
	a(0, 0) = 1
	dim a, 3, 3
	a(0, 3) = 1
	dim a, 3, 3
	a(0, 0, 0) = 1
	ok()
----------------------------------------
	dim a, 3, 3
	assert_error 7
	a(-1, 1) = 1
----------------------------------------
	dim a, 3, 3
	assert_error 7
	a(0, -1) = 1
----------------------------------------
	dim a, 3, 3
	assert_error 7
	a(3, -1) = 1
----------------------------------------
	dim a, 3, 3
	assert_error 7
	a(-1, 3) = 1
----------------------------------------
; 二次元配列は一次元目を拡張できない
	dim a, 1, 1
	assert_error 7
	a.1 = 1
----------------------------------------
; 三次元配列は一次元目を拡張できない
	dim a, 1, 1, 1
	assert_error 7
	a.1 = 1
----------------------------------------
; 三次元配列は二次元目を拡張できない
	dim a, 1, 1, 1
	assert_error 7
	a.0.1 = 1
----------------------------------------
; 三次元配列は二次元目を拡張できない
	dim a, 1, 1, 1
	assert_error 7
	a.0.1 = 1
----------------------------------------
; 四次元配列は一次元目を拡張できない
	dim a, 1, 1, 1, 1
	assert_error 7
	a.1 = 1
----------------------------------------
; 四次元配列は二次元目を拡張できない
	dim a, 1, 1, 1, 1
	assert_error 7
	a.0.1 = 1
----------------------------------------
; 四次元配列は三次元目を拡張できない
	dim a, 1, 1, 1, 1
	assert_error 7
	a.0.0.1 = 1
----------------------------------------
	a = "a", "b", "c", "d"
	is(length(a), 4)
	is(a.0, "a")
	is(a.1, "b")
	is(a.2, "c")
	is(a.3, "d")
	a = "x", "y"
	is(length(a), 4)
	is(a.0, "x")
	is(a.1, "y")
	is(a.2, "c")
	is(a.3, "d")
----------------------------------------
	dim a, 2, 2
	a.0.0 = 1, 2
	a.0.1 = 3, 4
	is(a.0.0, 1)
	is(a.1.0, 2)
	is(a.0.1, 3)
	is(a.1.1, 4)
----------------------------------------
; 111 を代入した時点で length2 が 1 になるので 222 の代入でエラーになる
	assert_error 7
	a(0, 0) = 111, 222
----------------------------------------
; 次元をまたいだ連続代入はできない
	assert_error 7
	dim a, 3, 3
	a.1.0 = 111, 222, 333
----------------------------------------
	dim a
	is(length(a), 1)
	is(length2(a), 0)
	is(length3(a), 0)
	is(length4(a), 0)
	dim a, 5
	is(length(a), 5)
	is(length2(a), 0)
	is(length3(a), 0)
	is(length4(a), 0)
	dim a, 1, 2
	is(length(a), 1)
	is(length2(a), 2)
	is(length3(a), 0)
	is(length4(a), 0)
	dim a, 1, 2, 3, 4
	is(length(a), 1)
	is(length2(a), 2)
	is(length3(a), 3)
	is(length4(a), 4)
----------------------------------------
	assert_error 3
	dim a, -1
----------------------------------------
	assert_error 25
	dim a.1
----------------------------------------
#module
#deffunc f var v
	is(v, 42)
	v = 87
	return
#global

	a = 42
	f a
	is(a, 87)
----------------------------------------
#module
#deffunc f var v
	v = 5
	is(v, 5)
	v *= 3
	is(v, 15)
	v ++
	is(v, 16)
	v --
	is(v, 15)
	return
#global

f a.1
----------------------------------------
#module
#deffunc f var v
	v = "foo"
	return
#global

dim a, 3
f a.0
is(length(a), 1)
is(a, "foo")
----------------------------------------
#module
#deffunc f var v
	assert_error 31
	v = "foo"
	return
#global

dim a, 3
f a.1
