


BuiltinFuncs[Token.Type.EXTCMD][0x0f] = function mes(val) {
	this.scanArgs(arguments, '.?');
	if(val) {
		print(CP932.decode(val.toStrValue()._value));
	} else {
		print();
	}
};

Evaluator.prototype.disposeException = function disposeException(e) {
	var insn = this.sequence[this.pc];
	if(e instanceof HSPError) {
		print('#Error '+e.errcode+' in line '+insn.lineNo+' ('+insn.fileName+') ' + (this.getBuiltinFuncName(insn)||''));
		print('--> '+(e.message||ErrorMessages[e.errcode]));
	}
};

function main(){
	var data = [
'\x48\x53\x50\x33\x01\x03\x00\x00\x05\x00\x00\x00\x87\x01\x00\x00',
'\x60\x00\x00\x00\xc6\x00\x00\x00\x26\x01\x00\x00\x25\x00\x00\x00',
'\x4b\x01\x00\x00\x08\x00\x00\x00\x53\x01\x00\x00\x34\x00\x00\x00',
'\x87\x01\x00\x00\x00\x00\x00\x00\x87\x01\x00\x00\x00\x00\x00\x00',
'\x87\x01\x00\x00\x00\x00\x00\x00\x87\x01\x00\x00\x00\x00\x00\x00',
'\x87\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
'\x09\x20\x0f\x00\x02\x00\x06\x00\x01\x20\x00\x00\x00\x00\x08\x00',
'\x04\x80\x20\xa1\x07\x00\x0f\x20\x0a\x00\x01\x00\x01\x00\x01\x40',
'\x00\x00\x04\x00\x01\x00\x00\x00\x00\x00\x08\x20\x21\x00\x01\x00',
'\x01\x00\x04\x40\x2a\x00\x01\x40\x00\x00\x09\x20\x0f\x00\x02\x00',
'\x0e\x00\x01\x20\x02\x00\x00\x00\x08\x00\x0d\x00\x08\x00\x00\x00',
'\x28\x00\x04\x80\xff\xff\xff\xff\x00\x00\x29\x00\x0f\x20\x04\x00',
'\x07\x00\x00\x00\x04\x00\x64\x00\x01\x20\x03\x00\x00\x00\x08\x00',
'\x0d\x00\x02\x00\x00\x00\x28\x00\x01\x00\x01\x00\x00\x00\x29\x00',
'\x0f\x20\x05\x00\x01\x20\x04\x00\x00\x00\x08\x00\x0d\x00\x08\x00',
'\x00\x00\x28\x00\x04\x80\xff\xff\xff\xff\x00\x00\x29\x00\x09\x20',
'\x0f\x00\x0d\x00\x00\x00\x00\x00\x28\x00\x01\x00\x04\x00\x01\x00',
'\x02\x00\x00\x00\x01\x00\x00\x00\x29\x00\x0f\x20\x11\x00\x0f\x20',
'\x00\x00\x07\x00\x01\x00\x74\x2e\x68\x73\x70\x00\x70\x72\x65\x70',
'\x61\x72\x65\x00\x73\x74\x61\x72\x74\x00\x73\x69\x7a\x65\x00\x61',
'\x00\x73\x74\x00\x6c\x65\x6e\x00\x65\x64\x00\x42\x00\x00\x00\x5d',
'\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x04\x07\x0a\x08\x04\x0d',
'\x06\x0c\x02\x0d\x0e\x00\x06\xfd\x14\x00\x00\x00\x00\xfd\x19\x00',
'\x00\x01\x00\xfd\x1b\x00\x00\x02\x00\xfd\x1e\x00\x00\x03\x00\xfd',
'\x22\x00\x00\x04\x00\xff\xff'
	].join('');

	var axdata = new AXData(data);

	var compiler = new Compiler(axdata);
	var sequence = compiler.compile();

	sequence.forEach(function(insn){
		print(insn);
	});

	var evaluator = new Evaluator(axdata, sequence);
	evaluator.evaluate();
	return evaluator;
}

try {
	main();
}catch(e){
	print(e);
	print(e.stack);
}

